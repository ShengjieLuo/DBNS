package com.rules.trojan

import com.model.problem.Trojan
import com.model.other.Time
import com.model.other.Type
import com.model.other.Item

// This rule is a naive simple to detect Trojan
// Key Logic: 
// 1. Usually a host machine within trojan upload more frequently than download
// 1. 通常来说在木马发作期间，感染木马的机器上传数据的次数比下载数据的次数多
// 2. Usually a host machine within trojan upload package with larger size then dowonload
// 2. 通常来说在木马发作期间，感染木马的机器上传数据的总量比下载数据的总量大
// 3. Usually a host machine within trojan upload package with larger size then which without trojan
// 3. 通常来说在木马发作期间，感染木马的机器上传数据的次数，比其他机器的平均上传次数多
// 4. Usually a host machine within trojan upload more frequently than which without trojan
// 4. 通常来说在木马发作期间，感染木马的机器上传数据的总量，比其他机器的平均上传总量大
// Only when the data suits all four key logic, then the host machine would be detected as the trojan infected

//=========================================================================
// Set the runtime environment
//=========================================================================
rule "SET: begin detection time"
   dialect "mvel"
   when
     $time : Time()
   then
     $time.setbeginTime(1490630400)
     update($time)
end

rule "SET: end detection time"
   dialect "mvel"
   when
     $time : Time()
   then
     $time.setendTime(1490634000)
     update($time)
end

rule "SET: detection type"
   dialect "mvel"
   when
     $type : Type()
   then
     $type.setType("Trojan")
     update($detectionType)
end

/*rule "SET: Item name"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.setname("IP-Hostmachine")
     update($item)*/
 
//==========================================================================
// Set the statistical data required for judgement
//==========================================================================
rule "Action: Acquire the TCP upload flow amount for each IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SS_TCP_UPLOAD_SIZE_SRCIP($time.beginTime,$time.endTime)
     update($item)
end

rule "Action: Acquire the TCP download flow amount for each IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SS_TCP_DOWNLOAD_SIZE_DSTIP(beginTime,endTime)
     update($item)
end

rule "Action: Acquire the TCP upload flow times for each IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SS_TCP_UPLOAD_COUNT_SRCIP(beginTime,endTime)
     update($item)
end

rule "Action: Acquire the TCP download flow times for each IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SS_TCP_DOWNLOAD_COUNT_DSTIP(beginTime,endTime)
     update($item)
end

rule "Action: Acquire the average TCP upload flow size for all IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SA_TCP_UPLOAD_SIZE_AVERAGE_SRCIP(beginTime,endTime)
     update($item)
end

rule "Action: Acquire the average TCP upload flow size for all IP"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SA_TCP_UPLOAD_COUNT_AVERAGE_SRCIP(beginTime,endTime)
     update($item)
end

//==========================================================================
// Finish the comparison between different data
//==========================================================================

rule "Comparison: Compare the TCP upload flow and TCP download flow size"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SC_TCP_DOWLOAD_UPLOAD_RATIO(key="upload-download-size",index=5,problem="TCP upload size is obviously larger than download size",)
     update($item)
end

rule "Comparison: Compare the TCP upload flow and TCP download flow times"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SC_TCP_DOWLOAD_UPLOAD_RATIO(key="upload-download-count",index=3,problem="TCP upload times is obviously more than download times")
     update($item)
end

rule "Comparison: Compare the TCP upload flow and average upload flow size"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SC_TCP_DOWLOAD_UPLOAD_RATIO(key="upload-average-size",index=5,problem="TCP upload size is obviously larger than average size")
     update($item)
end

rule "Comparison: Compare the TCP upload flow and average upload flow times"
   dialect "mvel"
   when
     $item : Item()
   then
     $item.SC_TCP_DOWLOAD_UPLOAD_RATIO(key="upload-average-count",index=3,problem="TCP upload times is obviously more than average times")
     update($item)
end

//==========================================================================
// Make the judgement of the Trojan
//==========================================================================
rule "Judgement: Show the judgement result"
   dialect "mvel"
   when
     $item : Item(problem contains "TCP upload size is obviously larger than download size" &&
                  problem contains "TCP upload times is obviously more than download times" &&
                  problem contains "TCP upload size is obviously larger than average size"  &&
                  problem contains "TCP upload times is obviously more than average times")
   then
     $trojan = new Trojan($item,$time)
     $trojan.insertProblem("TCP upload size is obviously larger than download size")
     $trojan.insertProblem("TCP upload times is obviously more than download times")
     $trojan.insertProblem("TCP upload size is obviously larger than average size")
     $trojan.insertProblem("TCP upload times is obviously more than average times")
     insert($trojan)
end

//==========================================================================
// Report the problem
//==========================================================================
rule "Report: Report a Trojan"
   dialect "mvel"
   when
     $trojan : Trojan()
   then
     $trojan.reportProblem()
end
